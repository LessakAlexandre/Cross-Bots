Explicação do código
1. Quadrado magico
	De início vemos a criação da matriz utilizando a função “criarmatriz” na qual precisa de um valor para criar-se uma matriz quadrada usando-se de um vetor o qual é uma é uma lista podemos inserir esse vetor dentro de outra lista com o método “append” formando a matriz. Logo após isso temos outra função nomeada como” checagem” a qual tem o papel de verificar se a soma de linhas, colunas e diagonais possuem o mesmo valor. Depois de criado essas duas funções entramos na área principal no qual temos operações dedicas para somar cada linha e coluna como um método que gosto de chamar de varredura o qual vai item por item e conforme a linha e coluna que está são atribuídos a diferentes variáveis. Por fim chamamos a função checagem que retorna um valor booleano.
	Algo que que chamou a atenção nesse código é como devemos atribuir os valores a duas ou mais variáveis, por exemplo o primeiro item da matriz deve ser somado com a diagonal principal, primeira linha e primeira coluna e por isso devemos ter cuidado para não excluir este item de todos os possíveis encaixes.
2. Jogo Pauzinhos
	Iniciamos o código sorteando quando pauzinhos entrar no jogo permitindo que haja uma dinâmica utilizamos a biblioteca Random e sua função(randint). Com isso entramos em loop enquanto a quantidade de palitos for maior que zero. Dessa forma questionamos ao jogador quantos gravetos deseja retirar (1,2 ou 3) não aceitando nenhum outro valor, após a escolha retiramos este valor da variável que armazenava quantidade de gravetos. Após a vez do jogador o computador entra em ação nessa parte ele deve escolher de forma sabia quantos palitos retirar para a assim remover, no entanto ele pode desistir caso veja que não haja possibilidade de ganhar encerrando o loop.
	A dificuldade do código se posso chamar assim foi tentar ensinar ao computador qual o melhor número de pauzinhos remover pois caso a ação seja padronizada você terá um jogo monótono, no entanto ao perceber um padrão de com todo número múltiplo de 4 o computador cerca você numa armadilha que não importe quantos palitos ainda restem pois no final sempre restara 4 palitos para você escolher retirar 1 ,2 ou 3 ou seja o computador sempre busca retirar quantos palitos forem necessários para chegar num número múltiplo de 4.
3. Itinerário de viagem 
	Neste código reaproveitei a função do exercício do quadrado mágico apenas com a diferença de solicitar uma entrada apenas quando as cidades de destino forem diferentes entre elas, por exemplo quando for da cidade 1 para cidade 3, mas não da cidade 1 para a cidade 1 que por lógica sabemos que será 0(Algo que alterei neste código do sugerido por vocês é que não existe cidade 0 apenas cidade 1 para frente, claro que isso não passa de estética). Com isso, a criação da função “viagens” para calcular quantas viagens foram feitas e a soma entre todos os percursos solicitamos ao usuário qual cidade ele deseja ir começando a partir da 1, lembrando também que o programa não permite que a cidade n seja maior do que as informadas. Por fim, quando selecionamos a cidade de início, ou seja, a cidade 1 concluímos um dos nossos itinerários e caso chegue a zero o programa se encerra e apresenta a distância que percorremos
	O ponto chave do código é saber localizar na matriz as distâncias de uma cidade para outra e saber a hora atribuir a uma variável a outra aja em mente que após sairmos do ponto de início não contamos com a mesma distância logo caso seja uma variável alterada antes de outra pode-se gerar um problema no código.
4. Mediana de vetores
	Neste enunciado e nos solicitado que recebemos uma quantidade n de elementos e com eles estabelecemos uma mediana. Dessa forma ,isolamos os elementos que uma vez eram strings agora em int com adicionamos eles num única lista ,mas antes verificamos se eles já estão nesta lista para assim evitar números repetidos, após isso usamos a função sort() nesta list e agora temos todos os itens alinhados podemos definir qual é a elemento do meio com uma divisão que só aceita números inteiros que sempre arredonda para baixo no entanto devemos lembrar que caso o vetor tenha uma quantidade par de elementos a mediana será a soma entre a metade e a metade-1divido por dois por exemplo [1,2,3,4] metade é igual a 2 porém o elemento dois é o “3”  então será o elemento 2 e o elemento 1, ou seja,( 3+2)/2 agora se fosse [1,2,3,4,5] a metade ainda é 2 pois arredondamos para baixo no caso de ser 2,5, por tanto a mediana é 3.  
